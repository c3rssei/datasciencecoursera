Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

	SELECT count(*) FROM attribute; 

i. Attribute table = 10000 
ii. Business table =10000
iii. Category table =10000
iv. Checkin table =10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table =10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT count(distinct(key)) from table;

i.Business = SELECT count(distinct(id)) FROM business = 10000
ii.Hours = SELECT count(distinct(business_id)) FROM hours = 1562 
iii.Category =SELECT count(distinct(business_id)) FROM category =2643
iv.Attribute =SELECT count(distinct(business_id)) FROM attribute=1115
v. Review =SELECT count(distinct(id)) FROM review = 10000
vi. Checkin = SELECT count(distinct(business_id)) FROM checkin=493
vii. Photo =SELECT count(distinct(business_id)) FROM photo =6493
viii. Tip = SELECT count(distinct(user_id)) FROM tip= 537
ix. User = SELECT count(distinct(id)) FROM user = 10000
x. Friend = SELECT count(distinct(user_id)) FROM friend = 11
xi. Elite_years =SELECT count(distinct(user_id)) FROM elite_years= 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
	
	SELECT COUNT(* ),
			COUNT(id),
			COUNT(name),
			COUNT(review_count),
			COUNT(yelping_since),
			COUNT(useful),
			COUNT(funny),
			COUNT(cool),
			COUNT(fans),
			COUNT(average_stars) ,
			COUNT(compliment_hot),
			COUNT(compliment_more),
			COUNT(compliment_profile),
			COUNT(compliment_cute),  
			COUNT(compliment_list),  
			COUNT(compliment_note),  
			COUNT(compliment_plain),  
			COUNT(compliment_cool),  
			COUNT(compliment_funny),  
			COUNT(compliment_writer),  
			COUNT(compliment_photos)
	FROM user; 

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1	max:5	avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT city,
       	Sum(review_count) AS Total
		FROM   business
		GROUP  BY city
		ORDER  BY total DESC  
	
	Copy and Paste the Result Below:
	
+-----------------+-------+
| city            | Total |
+-----------------+-------+
| Las Vegas       | 82854 |
| Phoenix         | 34503 |
| Toronto         | 24113 |
| Scottsdale      | 20614 |
| Charlotte       | 12523 |
| Henderson       | 10871 |
| Tempe           | 10504 |
| Pittsburgh      |  9798 |
| Montréal        |  9448 |
| Chandler        |  8112 |
| Mesa            |  6875 |
| Gilbert         |  6380 |
| Cleveland       |  5593 |
| Madison         |  5265 |
| Glendale        |  4406 |
| Mississauga     |  3814 |
| Edinburgh       |  2792 |
| Peoria          |  2624 |
| North Las Vegas |  2438 |
| Markham         |  2352 |
| Champaign       |  2029 |
| Stuttgart       |  1849 |
| Surprise        |  1520 |
| Lakewood        |  1465 |
| Goodyear        |  1155 |
+-----------------+-------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars,
       Sum(stars)
FROM   business
WHERE  city = 'Avon'
GROUP  BY stars  

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+------------+
| stars | sum(stars) |
+-------+------------+
|   1.5 |        1.5 |
|   2.5 |        5.0 |
|   3.5 |       10.5 |
|   4.0 |        8.0 |
|   4.5 |        4.5 |
|   5.0 |        5.0 |
+-------+------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars,
       Sum(stars)
FROM   business
WHERE  city = 'Beachwood'
GROUP  BY stars  

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+------------+
| stars | sum(stars) |
+-------+------------+
|   2.0 |        2.0 |
|   2.5 |        2.5 |
|   3.0 |        6.0 |
|   3.5 |        7.0 |
|   4.0 |        4.0 |
|   4.5 |        9.0 |
|   5.0 |       25.0 |
+-------+------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	select name, review_count as Total from user
	group by id
	order by Total DESC
	limit 3;
		
		
	Copy and Paste the Result Below:
		
+--------+-------+
| name   | Total |
+--------+-------+
| Gerald |  2000 |
| Sara   |  1629 |
| Yuri   |  1339 |
+--------+-------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
They are not necessarily correlated, there are users with 50 fans and 1629 reviews, there is even one with 16 fans and 1116 reviews

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	yes there more reviews with the word love than hate 
+------+
| Hate |
+------+
|  232 |
+------+
| Love |
+------+
| 1780 |
+------+
	
	SQL code used to arrive at answer:

SELECT Count(text)
FROM   review
WHERE  text LIKE( '%love%' )  

SELECT Count(text)
FROM   review
WHERE  text LIKE( '%hate%' )  
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name,
       fans
	FROM   user
	GROUP  BY id
	ORDER  BY fans DESC
	LIMIT  10;  
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
Las Vegas category Shopping

i. Do the two groups you chose to analyze have a different distribution of hours?

yes, Stores with fewer stars open on Saturdays, those with more stars on Monday

+-------+----------------------+
| stars | hours                |
+-------+----------------------+
|   2.5 | Saturday|8:00-22:00  |
|   3.5 | Saturday|10:00-16:00 |
|   4.5 | Saturday|8:00-16:30  |
|   5.0 | Monday|8:00-17:00    |
+-------+----------------------+

ii. Do the two groups you chose to analyze have a different number of reviews?

 Yes, 3.5 and 4.5 stars have higher reviews than the other scores, even 5 stars only have 4

+-------+----------------------+--------------+
| stars | hours                | review_count |
+-------+----------------------+--------------+
|   2.5 | Saturday|8:00-22:00  |            6 |
|   3.5 | Saturday|10:00-16:00 |           11 |
|   4.5 | Saturday|8:00-16:30  |           32 |
|   5.0 | Monday|8:00-17:00    |            4 |
+-------+----------------------+--------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
The addresses do not tell me much, except that the one with the most reviews is in a tourist place with high traffic


SQL code used for analysis:

SELECT b.stars,
       h.hours,
       b.review_count,
       b.address
FROM   (business b
        INNER JOIN category c
                ON b.id = c.business_id)
       INNER JOIN hours h
               ON b.id = h.business_id
WHERE  b.city = 'Las Vegas'
       AND c.category = 'Shopping'
GROUP  BY b.stars
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: stores that are open have a higher number of reviews than those that are closed
         
+---------+-------------------+-------------------+
| is_open | avg(review_count) | sum(review_count) |
+---------+-------------------+-------------------+
|       0 |     23.1980263158 |             35261 |
|       1 |     31.7570754717 |            269300 |
+---------+-------------------+-------------------+


ii. Difference 2: the stores that are open have on average a greater amount of stars than those that are closed
         
+---------+---------------+
| is_open |    avg(stars) |
+---------+---------------+
|       0 | 3.52039473684 |
|       1 | 3.67900943396 |
+---------+---------------+         
         
SQL code used for analysis:

	SELECT is_open,
       Avg(stars),
       Avg(review_count),
       Sum(review_count)
FROM   business
GROUP  BY is_open  
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
predicting the overall star rating for a business

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
Predict the number of stars that a store will have, for this it is necessary to know the location, the country, the category it has also the hours, based on the reviews and the stars given to the stores that correspond both in location and category, I would estimate the possible stars

                  
iii. Output of your finished dataset:
         
 +----------------------+---------------------------+-----------+-------+-------+---------+-----------------------+--------------+
| name                 | address                   | city      | state | stars | is_open | hours                 | category     |
+----------------------+---------------------------+-----------+-------+-------+---------+-----------------------+--------------+
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Monday|12:00-23:00    | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Tuesday|12:00-23:00   | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Friday|12:00-23:00    | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Wednesday|12:00-23:00 | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Thursday|12:00-23:00  | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Sunday|12:00-23:00    | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Saturday|12:00-23:00  | Asian Fusion |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Monday|12:00-23:00    | Restaurants  |
| Flaming Kitchen      | 3235 York Regional Road 7 | Markham   | ON    |   3.0 |       1 | Tuesday|12:00-23:00   | 

        
iv. Provide the SQL code you used to create your final dataset:

SELECT b.NAME,
       b.address,
       b.city,
       b.state,
       b.stars,
       b.is_open,
       h.hours,
       c.category
FROM   (business b
        INNER JOIN category c
                ON b.id = c.business_id )
       INNER JOIN hours h
               ON b.id = h.business_id  